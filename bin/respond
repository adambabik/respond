#!/usr/bin/env node

var program = require('commander'),
	server = require('../src/server'),
	pkg = require('../package.json'),
	gaze = require('gaze');

function list(val) {
	return val.split(' ');
}

program
	.version(pkg.version)
	.usage('[options]')
	.option('-p, --port <n>', 'set up server port', parseInt)
	.option('-w, --watch <files>', 'files and directories to watch', list)
	.parse(process.argv);

if (program.port) {
	console.log('Port: %d', program.port);
}

if (program.watch) {
	console.log('Files:', program.watch);
}

server.listen(program.port);

// Watch

gaze(program.watch, function (err) {
	if (err) {
		console.log('Error while watching', err);
		return;
	}
	
	this.on('changed', function (filepath) {
		var ext = filepath.match(/\.\w+$/i);
		
		if (!ext) {
			return;
		}

		console.log('\n', filepath + ' was changed with extenstion', ext[0]);

		switch (ext[0]) {
		case '.js':
			refresh();
			break;
		case '.css':
			refreshCSS();
			break;
		}
	});
});

// CLI

var isWaiting = false,
	commandDate = 0,
	interval;

server.subscribe(function (message) {
	console.log('>>>>> [ received ]', message);
	cancelWaiting();
	asyncPrompt();
});

function showHelp() {
	console.log();
	console.log('  Special commands:');
	console.log();
	console.log('    :quit                 close application');
	console.log('    :help                 show help');
	console.log();
	console.log('  Regular commands:');
	console.log();
	console.log('    eval <command>        evaluate command on active web pages and return replay');
	console.log('    refresh               reload active web pages');
	console.log('    refreshCSS [<files>]  reload only selected CSS files');
	console.log();
}

function refresh() {
	server.command('refresh', {});
}

function refreshCSS() {
	server.command('refreshCSS', {});
}

function asyncPrompt() {
	process.nextTick(function () {
		prompt();
	});
}

function cancelWaiting() {
	clearInterval(interval);
	isWaiting = false;
}

function prompt(first) {
	if (first) {
		console.log();
		console.log('To get some help type :help');
	}

	program.prompt('respond> ', function (command) {
		var parts = list(command),
			cmd = parts.shift();

		switch (cmd) {
		case ':quit':
			server.close(function () {
				process.exit();
			});
			break;

		case ':help':
			showHelp();
			break;

		case 'eval':
			server.command('eval', { data: parts.join(' ') });
			isWaiting = true;
			commandDate = Date.now();
			break;

		case 'refresh':
			refresh();
			//isWaiting = true;
			//commandDate = Date.now();
			break;

		case 'refreshCSS':
			refreshCSS();
			//isWaiting = true;
			//commandDate = Date.now();
			break;

		default:
			console.log('Unknown command');
			break;
		}

		if (isWaiting) {
			// @TODO replace with setTimeout
			interval = setInterval(function () {
				if (!isWaiting || Date.now() - commandDate > 5 * 1000) {
					process.stdout.write(' timeout\n');
					cancelWaiting();
				} else {
					process.stdout.write('.');
				}
			}, 1000);
			return;
		}

		asyncPrompt();
	});	
}

// Start!

prompt(true);
